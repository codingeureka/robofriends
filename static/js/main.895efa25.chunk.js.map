{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPendig","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","isPending","dispatch","event","text","target","value","console","log","payload","fetch","then","response","json","data","catch","intialStateSearch","intialStateRobots","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.895efa25.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name,email,id }) => {\n    return(\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/+${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n\n            </div>\n        \n        </div>\n        \n\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card'\n\nconst CardList = ({robots}) => {\nreturn(\n    <div>\n        {\n        robots.map((user,i) => {\n         return (\n        <Card \n         key = {i}\n         id=  {robots[i].id}\n         name = {robots[i].name}\n         email = {robots[i].email } \n         />\n    );\n})\n}\n    </div>\n    );\n}\n\nexport default CardList","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return (\n    <div className='pa2'>\n        <input \n        className='pa3 ba b--green bg-ligtest-blue'\n        type='search' \n        placeholder='search robots'\n        onChange={searchChange} \n        />\n\n    </div>\n\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return(\n        <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n        {props.children}\n        \n        </div>\n    );\n};\nexport default Scroll;","import React, { Component } from 'react' ;\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true})\n\n    }\n\n    render() {\n        if(this.state.hasError){\n            return <h1> Oooops. That is not good</h1>\n        }\n        return this.props.children\n    }\n    \n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions'\n\n//reducer searchRobots \nconst mapStateToProps = state => {\n    return{\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPendig,\n        error: state.requestRobots.error\n    }\n} \n\nconst mapDispatchToProps = (dispatch) => {\n return{\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: (event) => dispatch(requestRobots())\n    //we want to return a function remenber the thunkMiddleware wait a function\n}\n }   \n\n\n\n\n\nclass App extends Component {\n \n    componentDidMount() {\n     //   console.log(this.props.store.getState())\n        this.props.onRequestRobots();\n    }\n\n\n    render() {\n        \n        const { searchField, onSearchChange,robots, isPendig } = this.props;\n        const filteredRobots = robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n    return isPendig ?\n        <h1>Loading</h1> :\n         (\n            <div className='tc'>\n                <h1 className='f1'>RoboFriends</h1>\n                <SearchBox searchChange={onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundry>\n                    <CardList robots = {filteredRobots}/>\n                    </ErrorBoundry>\n                                        \n                </Scroll>\n                \n               \n            </div>\n            \n            );\n\n    }\n       \n}   \n\n//mapStateToPros -> State\n//mapDispatchToProps -> Action Dispatch\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n","import { \n   CHANGE_SEARCH_FIELD,\n   REQUEST_ROBOTS_PENDING,\n   REQUEST_ROBOTS_FAILED,\n   REQUEST_ROBOTS_SUCCESS\n\n} from './constants.js'\n\n\nexport const setSearchField = (text) => {\n    console.log(text)\n return{\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n }  \n}\n\n// we create a high order function, a function that returns a function\n//dispatch funtion provide the intern function\n\n//Redux would understand it, because it waits a object for action not a function,that why you use the thunkmiddleware\n//now you listen to action, the request get trigger return a function from redux-thunk, then give us a dispatch\n//to send a function, so we can call some action with dispatch,then we run our action \n//requestRobos has 2 Functions\nexport const requestRobots = () => (dispatch) => {\n   dispatch({ type: REQUEST_ROBOTS_PENDING});\n      fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n      \n      }","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_FAILED,\n    REQUEST_ROBOTS_SUCCESS\n \n } from './constants.js'\n\nconst intialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=intialStateSearch, action={}) => {\n   console.log(action.type)\n    switch(action.type) {\n\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n    }\n}\n\nconst intialStateRobots = {\n    isPending: false,\n    robots:[],\n}\n\nexport const requestRobots = (state=intialStateRobots, action={}) => {\n    console.log(action.type)\n     switch(action.type) {\n \n         case REQUEST_ROBOTS_PENDING:\n             return Object.assign({}, state, { isPending: true})\n         \n         case REQUEST_ROBOTS_SUCCESS:\n             return Object.assign({}, state, { robots: action.payload, isPending: false})\n  \n         case REQUEST_ROBOTS_FAILED:\n             return Object.assign({}, state, { error: action.payload, isPending: false })\n         \n         default:\n             return state;\n     }\n }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport './index.css';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons'\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer,applyMiddleware( thunkMiddleware\n,logger))\nReactDOM.render(\n    <Provider store={store} >\n      <App />\n    </Provider>\n          \n  ,  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}